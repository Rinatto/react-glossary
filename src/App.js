import React, { useState } from "react";
import "./styles/App.css"
import PostList from "./components/postList";
import MyButton from "./components/UI/button/button";


function App() {
  const [posts] = useState([
    {id: 1, title: 'Система Типов', body: '– это совокупность правил, назначающих свойства, называемые типами, различным конструкциям, составляющим программу. Обычно, к конструкциям нуждающихся в аннотации типов, относятся - переменные, поля и свойства объекта, а также параметры и возвращаемое функцией значение.' },
    {id: 2, title: 'Тип данных', body: '– является фундаментальным понятием теории программирования. Тип данных (или просто тип) — это характеристика данных, которая определяет множество значений и операций, которые могут быть выполнены над этими данными.' },
    {id: 3, title: 'Типизация', body: '– это процесс установления принадлежности результата выражения к типу данных, с последующим связыванием его с объектом данных, представляющим его в программе.' },
    {id: 4, title: 'Привязка', body: '– это объединение идентификатора со значением.' },
    {id: 5, title: 'Лексический анализ', body: '– это разбитие исходного кода на лексемы, при этом пробелы и комментарии удаляются.' },
    {id: 6, title: 'Лексема', body: '– это последовательность допустимых символов.' },
    {id: 7, title: 'Синтаксический анализ', body: '– это этап построения дерева разбора, путем определения последовательности лексем. Дерево разбора ещё называют синтаксическое дерево.' },
    {id: 8, title: 'Семантический анализ', body: '– это важный этап, на котором, устанавливается семантика (смысл) построенного на предыдущем шаге дерева разбора.' },
    {id: 9, title: 'Вывод типов', body: '– это возможность компилятора(интерпретатора) логически определять-указывать тип данных на основе анализа выражения. Для переменной не имеющей явной аннотации типа, вывод типов, выведет тип данных на основе результата присваемого выражения.' },
    {id: 10, title: 'Совместимость типов', body: '– это механизм, по которому происходит сравнение типов.' },
    {id: 11, title: 'Статическая типизация', body: 'обуславливается тем, что конструкция, нуждающаяся в аннотации типа, связывается с типом данных, в момент объявления на этапе компиляции. При этом, связь с типом данных остается неизменна.' },
    {id: 12, title: 'Динамическая типизация', body: 'обусловлена тем, что конструкция, нуждающаяся в аннотации типа, связывается с типом данных на этапе выполнения программы, в момент присвоения значения. При этом связь с типом данных может быть изменена.' },
    {id: 13, title: 'Структурная типизация', body: '– это принцип, определяющий совместимость типов, основываясь не на иерархии наследования или явной реализации интерфейсов, а на их описании.' },
    {id: 14, title: 'Сильная типизация', body: 'не позволяет выражениям с несовместимыми типами выполняться и не выполняют неявное преобразование типов в ситуациях, когда нужно выполнять преобразование явно.' },
    {id: 15, title: 'Слабая типизация', body: 'не позволяет выражениям с несовместимыми типами выполняться и не выполняют неявное преобразование типов в ситуациях, когда нужно выполнять преобразование явно.' },
    {id: 16, title: 'Явная типизация', body: 'в программировании вид типизации, при котором в момент объявления переменной требуется явно указать ее тип.' },
    {id: 17, title: 'Неявная типизация', body: '– это определение факта реализации определённого интерфейса объектом без явного указания или наследования этого интерфейса, а просто по реализации полного набора его методов.' },
    {id: 18, title: 'JavaScript', body: 'язык программирования, который позволяет создавать динамически обновляемый контент, управлять мультимедиа, анимировать изображения и делать многое другое.' },
    {id: 19, title: 'TypeScript', body: '– это строго типизированный язык программирования, основанный на JavaScript.' },
  ])
  return (
    <div className="App">
      <MyButton/>
      <PostList posts={posts} />
    </div>
  );
}

export default App;

